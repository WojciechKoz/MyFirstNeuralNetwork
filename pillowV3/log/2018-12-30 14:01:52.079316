from __future__ import print_function # new print() on python2
from datetime import datetime
import numpy as np  

from mnist import MNIST

mndata = MNIST('./data')
images_full, labels_full = mndata.load_training()
images = []
labels = []

for i in range(60):
    images.append(images_full[i*100 : (i+1)*100])
    labels.append(labels_full[i*100 : (i+1)*100])

def sigmoid_prime(x):
    return np.exp(-x) / ((np.exp(-x) + 1) ** 2)

def sigmoid(x):
    return 1 / (1 + np.exp(-x))


#X = np.array([[0, 0],
#              [0, 1],
#              [1, 0],
#              [1, 1]])

#X = np.array(images)

y = []

for batch in labels:
    y.append([])
    for label in batch:
        y[-1].append([1.0 if i == label else 0.0 for i in range(10)])

y = np.array(y)

#y = np.array([[0],
#              [1],
#              [1],
#              [0]])

np.random.seed(1)

LEN = len(labels)
SIZES = [ 784, 17, 16, 10 ]

syn0 = 2 * np.random.random((SIZES[0], SIZES[1])) - 1  
syn1 = 2 * np.random.random((SIZES[1], SIZES[2])) - 1 
syn2 = 2 * np.random.random((SIZES[2], SIZES[3])) - 1  

# biases for respective layers
b0 = 2 * np.random.random((1, SIZES[1])) - 1
b1 = 2 * np.random.random((1, SIZES[2])) - 1
b2 = 2 * np.random.random((1, SIZES[3])) - 1

for i, batch in list(enumerate(images)):
    X = np.array(batch)
    print("x:")
    print(np.shape(X))
    
    print("======================= BATCH {} =======================".format(i))

    error = 1
    j = 0
    while error > 0.05 and j < 50:
        l0 = X
        l1 = sigmoid(np.dot(l0, syn0) + b0)
        l2 = sigmoid(np.dot(l1, syn1) + b1)
        l3 = sigmoid(np.dot(l2, syn2) + b2)

        l3_error = (y[i] - l3)#** 2

        error = np.mean(np.abs(l3_error))

        j += 1
        if j % 20 == 0:
            print(("[%d] error: " % j) + str(error))

        l3_delta = l3_error * sigmoid_prime(l3)
        l2_error = l3_delta.dot(syn2.T)
        l2_delta = l2_error * sigmoid_prime(l2)
        l1_error = l2_delta.dot(syn1.T)
        l1_delta = l1_error * sigmoid_prime(l1)

        syn2 += l2.T.dot(l3_delta)
        syn1 += l1.T.dot(l2_delta)
        syn0 += l0.T.dot(l1_delta)

        b0 += l1_delta.mean(axis=0)
        b1 += l2_delta.mean(axis=0)
        b2 += l3_delta.mean(axis=0)


def predict(data):
    l0 = [data]
    l1 = sigmoid(np.dot(l0, syn0) + b0)
    l2 = sigmoid(np.dot(l1, syn1) + b1)
    l3 = sigmoid(np.dot(l2, syn2) + b2)
    return np.argmax(l3)

print("Output after training: ")
print(l3)
for i, el in enumerate(l3):
    print(labels[0][i], "=", np.argmax(el), " predictions: ", el)

testing_images, testing_labels = mndata.load_testing()
correct = 0.0
for i, (image, label) in enumerate(zip(testing_images, testing_labels)):
    prediction = predict(image)
    if label == prediction:
        correct += 1.0
    correct_rate = correct / (i + 1.0)
    print("{} = {} (correct {}%)".format(label, prediction, 100 * correct_rate))

with open('log/' + str(datetime.now()), 'a') as f:
    with open(__file__, 'r') as myself:
        print(myself.read(), file=f)
    print("", file=f)
    print("#### answers:", file=f)
    print("correct_rate =", correct_rate, file=f)
    print("SIZES =", SIZES, file=f)
    print("syn0 =", syn0, file=f)
    print("syn1 =", syn1, file=f)
    print("syn2 =", syn2, file=f)
    print("b0 =", b0, file=f)
    print("b1 =", b1, file=f)
    print("b2 =", b2, file=f)


#### answers:
correct_rate = 0.279
SIZES = [784, 17, 16, 10]
syn0 = [[-0.16595599  0.44064899 -0.99977125 ... -0.94522481  0.34093502
  -0.1653904 ]
 [ 0.11737966 -0.71922612 -0.60379702 ... -0.15778475  0.91577906
   0.06633057]
 [ 0.38375423 -0.36896874  0.37300186 ... -0.42444932 -0.73994286
  -0.96126608]
 ...
 [-0.70321258  0.1765491  -0.42370155 ... -0.26046082  0.05919325
  -0.06489525]
 [ 0.62572818  0.22264185  0.19448981 ...  0.71910016 -0.96400919
  -0.9423558 ]
 [-0.9906838   0.92448163 -0.21864162 ...  0.12764666 -0.11388455
  -0.02486053]]
syn1 = [[-4.66714078e+01 -2.67135126e+00 -4.18313003e+00  1.15195476e+01
  -1.30908943e+01  1.55474474e+00 -1.10325216e+01 -1.42707977e+01
  -3.62800623e+00  3.24563668e+00 -6.31570781e+00 -4.02269153e+01
  -2.15052101e+01 -1.79169702e+00 -4.83333891e+00 -2.64573296e+00]
 [-4.06139802e+01  5.76308875e+00  4.77481771e+00  2.95514462e+01
   1.17818035e+01  2.61143114e+01  7.32467272e-01  7.06569820e+00
   3.10570548e+00  1.53019092e+01  6.97124511e+00 -1.99221210e+01
  -7.07785366e+00  3.18114555e+00  1.62258075e+01  2.17753284e+01]
 [-4.53079423e+01 -4.96324230e+00 -4.91551367e+00  1.12118036e+01
  -9.29484825e+00  2.43985998e+00 -1.32295805e+01 -2.07228389e+01
  -2.61147948e+00 -1.30227077e-01 -1.11654366e+01 -3.92391349e+01
  -1.27404443e+01 -4.93206942e+00 -6.57954703e+00 -3.10130757e-01]
 [-3.99407523e+01  1.67159487e+00  3.69153045e+00  3.29433906e+01
   1.24990817e+01  3.19265599e+01 -1.96818348e+00 -5.65231441e+00
   1.01757411e+00  7.74733897e+00 -6.83224836e+00 -9.75904739e+00
  -6.90577260e+00  5.16378552e-02  8.78402166e+00  2.23772055e+01]
 [-4.19754102e+01  1.83493615e-01  4.78843520e-01  4.84856888e+00
  -9.68319323e+00 -5.26283516e+00 -1.28999288e+01  3.38265972e+00
   1.47179702e+00  8.55139367e+00  2.30676900e+00 -4.30654584e+01
  -2.42328855e+01  1.87892640e+00  3.33395989e+00 -1.86956949e+00]
 [-4.35469502e+01  5.62704054e+00  5.37642183e+00  2.90534773e+01
   1.23033293e+01  2.29229809e+01  1.73716798e+00  7.65563730e+00
   4.64093529e+00  1.56813537e+01  7.42952318e+00 -1.92728713e+01
  -7.93403206e+00  1.78823094e+00  1.65707039e+01  2.43405595e+01]
 [-4.21989266e+01  6.73219162e-01 -7.90755412e-01  3.54195061e+00
  -1.26655930e+01 -5.34645999e+00 -1.09296664e+01  6.59856898e+00
   8.92453746e-01  8.21942849e+00  3.87776745e+00 -4.59799229e+01
  -2.62855601e+01  1.84725926e+00  6.35363707e+00 -5.48555811e+00]
 [-4.18815731e+01  2.78159387e-01 -9.24913955e-02  4.65123212e+00
  -9.33900605e+00 -5.51434079e+00 -1.00591414e+01  6.42535083e+00
   8.48934857e-01  8.33266683e+00  1.44536954e+00 -4.64485358e+01
  -2.37020701e+01  2.82401094e+00  3.25748641e+00 -3.54309790e+00]
 [-4.23672350e+01 -3.02302652e+00 -8.41448346e+00  9.19601047e+00
  -1.54244707e+01 -1.64780726e+00 -1.02334333e+01 -1.64356598e+01
  -5.59765605e+00 -1.21022860e-01 -7.40003729e+00 -4.07133603e+01
  -1.39633599e+01 -1.39873805e+01 -1.17139728e+01  2.24741649e-02]
 [ 2.99174645e+00 -1.75275571e+00 -1.00507438e+01 -3.86242939e+01
  -9.24645783e+00  1.21809660e+01  1.00404877e+01  1.17248955e+01
  -2.02790304e+01 -7.04500056e+00  7.00340924e+00  1.20407411e+01
  -1.62968961e+01 -5.15817273e+00  1.25280497e+01 -1.28095064e+01]
 [-7.47762410e+01 -1.25245850e+02 -1.03782401e+02  2.22079798e+00
  -9.55888528e+01 -9.57102360e+00 -6.19467811e+01 -2.12463716e+02
  -9.90795456e+01 -1.34139321e+02 -1.25648738e+02  4.39265202e+01
   4.14036497e+01 -9.29057707e+01 -1.26465279e+02 -1.02792527e+02]
 [-4.36619747e+01 -2.63457687e+00 -9.13898554e+00  9.94576711e+00
  -1.69084190e+01 -1.14025364e+00 -1.12831528e+01 -1.79705347e+01
  -6.44916985e+00  8.56888565e-01 -7.10503970e+00 -4.01332627e+01
  -1.58833056e+01 -1.56072471e+01 -1.24559322e+01 -8.79489660e-01]
 [-4.12615870e+01 -1.40901049e+00 -3.57527482e+00  7.81897111e+00
  -1.32365663e+01  1.13150339e+00 -9.61280404e+00 -7.40940089e+00
  -3.38978114e+00  4.10388517e+00 -5.22413777e+00 -4.19997922e+01
  -2.24999196e+01 -7.50825972e-01 -2.37862008e+00 -3.23141740e-01]
 [-3.89683651e+01 -1.14248618e+00 -2.85308426e+00  6.82853509e+00
  -1.17831609e+01  2.81022413e-02 -8.83541345e+00 -2.62644279e+00
  -2.27115905e+00  4.15285991e+00 -2.26718900e+00 -4.18277133e+01
  -2.38551142e+01  2.60021778e-02 -1.20602095e+00 -1.48871455e-01]
 [-4.64711166e+01 -3.21552369e+00 -7.16152821e+00  1.02251567e+01
  -1.63752446e+01 -1.26296679e+00 -1.24570685e+01 -1.75114548e+01
  -4.36054772e+00  9.30742795e-01 -7.01181157e+00 -3.86706774e+01
  -1.49707903e+01 -1.27349989e+01 -1.15418868e+01 -8.01179483e-01]
 [-4.10843803e+01 -1.72143830e+01  1.61336898e+01  2.63971347e+01
   2.13321124e+01  1.42239972e+01 -1.51139332e+01 -2.18579208e+01
   1.52098698e+01  6.93933761e+00 -1.56030639e+01 -4.32345192e+01
  -8.07898500e+00  1.68284748e+00  1.86224911e+00  1.95152677e+01]
 [-4.02558622e+01  3.08582178e+00  2.06289595e+00  5.69472634e+00
  -1.02650077e+00  3.19166272e+00 -6.74190054e+00  4.85227441e+00
   4.05000221e+00  8.23457172e+00  7.24926007e-01 -4.92428577e+01
  -1.77856433e+01 -1.90025827e+00  4.47802764e+00  6.29265495e+00]]
syn2 = [[  2.66860424  -8.36620125  -1.55818277   1.60957514  -7.91198642
   -0.3074092   -2.04835332  -3.93257665   0.71739781  -2.22856333]
 [ -0.22292076   3.21223448  -2.57447244  -2.0732796   -2.5433334
   -0.54875623  -1.76422754  -2.40014137  -1.44383653  -1.56989794]
 [  0.87224649  -0.92311452   1.84437731  -2.39814187  -2.02682093
   -1.47590725  -1.76724608  -3.80533396   1.02609035  -2.48854137]
 [ -4.17311083  -5.19060866  -2.36003498  -5.76726546   4.18101987
   -0.25338201  -3.04620938 -11.3190601   -5.09011409   2.2490648 ]
 [  1.30715854  -0.35106218   2.65414422  -1.59926591  -1.97858237
   -0.78442627  -2.44009713  -3.755271     0.53272337  -2.66798279]
 [ -7.2134316    0.45794604  -0.94622317  -8.60229985  -0.8010118
   -4.45406494  -5.54730076  -1.10795686  -2.80563348  -5.77010288]
 [ -5.64658641  -0.32776537  -0.41793033  -3.12894153  -4.61637521
   -3.22585403   2.48827061  -1.98092731  -4.07509146  -6.02815225]
 [ -1.72997687   5.25988722  -2.4149289   -0.33189917  -4.2019554
   -2.0390808   -1.28811948   0.77651722   0.78292249  -1.85237782]
 [  0.88363449  -2.80012913  -0.11240765  -1.5924025   -2.2412994
   -0.01525086   0.09504373  -4.77633621   1.36238916  -2.33744592]
 [ -0.67297483   0.83834612   1.09340175  -2.97197553  -2.03668899
    0.75000846   4.79271641  -3.73246496  -0.9566618   -2.12459413]
 [ -1.62635053   2.96229569  -2.83483823  -2.30516342  -2.1796215
   -2.14820674   1.17989371   1.17362394  -1.57060502  -1.31434698]
 [ -5.54647289  -1.9349181   -6.37920881  -2.67629572  -3.07605776
   -5.73838157  -8.07577399   2.63455938  -3.77070761  -4.33963609]
 [ -3.29902718  -1.79006478   2.32752036  -3.00986081   0.98265647
   -0.55467678  -4.12213952  -0.43241445  -1.58801648   3.24921171]
 [  0.88908846   3.8138553   -1.418071    -2.82708527  -1.61094389
   -0.14342848   1.73079596  -1.73023351   0.96539003  -1.42786031]
 [ -1.0235035    2.66492795  -0.44842339  -3.8475818   -4.57773831
    0.83805239   1.53853973   0.33245501  -0.26511746  -3.67558231]
 [ -0.44426177  -3.2003924    1.97474848  -1.13847195  -2.84239325
    1.12835212   2.62837044  -6.12817687  -0.08631761  -4.74551275]]
b0 = [[-1546.40662164 -1908.65447183 -1539.77257069 -1898.1327976
  -1549.2198951  -1906.91999658 -1539.21880647 -1544.8688451
  -1543.96082265    26.58682487  -403.14331747 -1542.44117482
  -1543.53503926 -1547.36590358 -1544.92274415 -1896.70081168
  -1581.05050184]]
b1 = [[-1.52235771 -4.5008249  -3.90055571 -2.68136891 -3.62149879 -3.97511115
  -1.70345783 -6.0444532  -3.6503521  -4.63889044 -5.53224711 -1.31508667
  -2.7607651  -5.65121328 -4.61004844 -3.27409919]]
b2 = [[ 0.26713803 -0.30076316 -0.75226682  0.31809537 -0.12389209 -0.24876427
  -0.17204559 -0.48325073 -0.59723191  0.29963354]]
